name: Deploy to dev server

on:
  push:
    branches: [ develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '19'

      - name: Run tests
        run: ./gradlew :perfume-core:clean :perfume-api:clean :perfume-core:test :perfume-api:test

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '19'

      - name: Build with Gradle
        run: ./gradlew :perfume-core:clean :perfume-api:clean :perfume-api:build

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          scp -i private_key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r perfume-api/build/libs/*.jar $USER@$HOST:/tmp
          ssh -i private_key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $USER@$HOST << EOF
            sudo systemctl stop my-spring-boot-app
            sudo mv /tmp/*.jar /app/my-spring-boot-app.jar
            sudo systemctl start my-spring-boot-app
          EOF
          rm -f private_key.pem
